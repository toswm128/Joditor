{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/jominsu/Documents/GitHub/Joditor/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import SyntaxHighlighter from\"react-syntax-highlighter\";import{docco}from\"react-syntax-highlighter/dist/esm/styles/hljs\";import styled from\"@emotion/styled\";import useWrite from\"lib/write\";import{useEffect}from\"react\";import ReactTextareaAutosize from\"react-textarea-autosize\";import TagBox from\"./TagBox\";import useEditorInputter from\"./useEditorInputter\";import tag from\"lib/assets/png/tag.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EditorInputter=function EditorInputter(_ref){var data=_ref.data;var _useWrite=useWrite(),WriteEditorState=_useWrite.WriteEditorState;useEffect(function(){if(data.id===WriteEditorState.focusLine&&inputterRef.current){inputterRef.current.setSelectionRange(9999,9999);inputterRef.current.focus();}},[WriteEditorState.focusLine,data.id]);var _useEditorInputter=useEditorInputter(data),onChangeText=_useEditorInputter.onChangeText,clickTagButton=_useEditorInputter.clickTagButton,onKeyPressEnter=_useEditorInputter.onKeyPressEnter,onKeyDownArrowUp=_useEditorInputter.onKeyDownArrowUp,onKeyDownArrowDown=_useEditorInputter.onKeyDownArrowDown,onKeyDownSpace=_useEditorInputter.onKeyDownSpace,onKeyDownTab=_useEditorInputter.onKeyDownTab,onKeyDownBackspace=_useEditorInputter.onKeyDownBackspace,onKeyDownZ=_useEditorInputter.onKeyDownZ,onDropUrl=_useEditorInputter.onDropUrl,onBlur=_useEditorInputter.onBlur,dragOver=_useEditorInputter.dragOver,dragLeave=_useEditorInputter.dragLeave,onPasteImg=_useEditorInputter.onPasteImg,click=_useEditorInputter.click,inputterRef=_useEditorInputter.inputterRef,text=_useEditorInputter.text,drogOver=_useEditorInputter.drogOver;return/*#__PURE__*/_jsxs(EditorInputterLine,{children:[/*#__PURE__*/_jsx(\"img\",{src:tag,alt:\"\",width:12,height:18,onClick:function onClick(){return clickTagButton();}}),/*#__PURE__*/_jsx(ReactTextareaAutosize,{placeholder:data.id===WriteEditorState.focusLine?\"\\uBA85\\uB839\\uC5B4 \\uC0AC\\uC6A9\\uC2DC \\\"/\\\"\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\":\"\",spellCheck:false// cacheMeasurements\n,style:drogOver?{borderBottom:\"5px solid #c4e3f0\"}:{},onKeyDown:function onKeyDown(e){switch(e.code){case\"Space\":onKeyDownSpace();break;case\"ArrowUp\":onKeyDownArrowUp(e);break;case\"ArrowDown\":onKeyDownArrowDown(e);break;case\"Tab\":onKeyDownTab(e);break;case\"Backspace\":onKeyDownBackspace();break;case\"KeyZ\":onKeyDownZ(e);break;}},onDrop:onDropUrl,onDragOver:function onDragOver(){dragOver();},onDragLeave:function onDragLeave(){dragLeave();},className:\"content\",value:text,ref:inputterRef,disabled:false,onPaste:onPasteImg,onKeyPress:onKeyPressEnter,onClick:function onClick(){click();},onChange:function onChange(e){return onChangeText(e,data.id);},onBlur:onBlur}),data.tag===\"code\"&&/*#__PURE__*/_jsx(SyntaxHighlighter,{showLineNumbers:true,onClick:function onClick(){return click();},language:\"javascript\",style:docco,wrapLongLines:true,lineProps:{style:{wordBreak:\"break-all\",whiteSpace:\"pre-wrap\"}},customStyle:{width:\"100%\",cursor:\"text\",height:\"100%\"},children:text}),data.id===WriteEditorState.tagBoxId&&data.id===WriteEditorState.focusLine&&/*#__PURE__*/_jsx(TagBox,{inputterRef:inputterRef})]});};var EditorInputterLine=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  position: relative;\\n  width: 100%;\\n  align-items: center;\\n  justify-content: center;\\n  & > textarea {\\n    background-color: rgba(0, 0, 0, 0);\\n  }\\n  &:hover {\\n    & > img {\\n      opacity: 1;\\n    }\\n  }\\n  & > img {\\n    opacity: 0;\\n    transition: 0.2s;\\n  }\\n\"])));export default EditorInputter;","map":{"version":3,"sources":["/Users/jominsu/Documents/GitHub/Joditor/src/lib/components/Write/WriteEditor/EditorInputter/EditorInputtor.tsx"],"names":["SyntaxHighlighter","docco","styled","useWrite","useEffect","ReactTextareaAutosize","TagBox","useEditorInputter","tag","EditorInputter","data","WriteEditorState","id","focusLine","inputterRef","current","setSelectionRange","focus","onChangeText","clickTagButton","onKeyPressEnter","onKeyDownArrowUp","onKeyDownArrowDown","onKeyDownSpace","onKeyDownTab","onKeyDownBackspace","onKeyDownZ","onDropUrl","onBlur","dragOver","dragLeave","onPasteImg","click","text","drogOver","borderBottom","e","code","style","wordBreak","whiteSpace","width","cursor","height","tagBoxId","EditorInputterLine","div"],"mappings":"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","sourcesContent":["import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport styled from \"@emotion/styled\";\nimport useWrite from \"lib/write\";\nimport { useEffect } from \"react\";\nimport ReactTextareaAutosize from \"react-textarea-autosize\";\nimport { line } from \"lib/Store/WriteEditorStore/type\";\nimport TagBox from \"./TagBox\";\nimport useEditorInputter from \"./useEditorInputter\";\nimport tag from \"lib/assets/png/tag.png\";\n\nconst EditorInputter = ({ data }: { data: line }) => {\n  const { WriteEditorState } = useWrite();\n\n  useEffect(() => {\n    if (data.id === WriteEditorState.focusLine && inputterRef.current) {\n      inputterRef.current.setSelectionRange(9999, 9999);\n      inputterRef.current.focus();\n    }\n  }, [WriteEditorState.focusLine, data.id]);\n\n  const {\n    onChangeText,\n    clickTagButton,\n    onKeyPressEnter,\n    onKeyDownArrowUp,\n    onKeyDownArrowDown,\n    onKeyDownSpace,\n    onKeyDownTab,\n    onKeyDownBackspace,\n    onKeyDownZ,\n    onDropUrl,\n    onBlur,\n    dragOver,\n    dragLeave,\n    onPasteImg,\n    click,\n    inputterRef,\n    text,\n    drogOver,\n  } = useEditorInputter(data);\n\n  return (\n    <EditorInputterLine>\n      <img\n        src={tag}\n        alt=\"\"\n        width={12}\n        height={18}\n        onClick={() => clickTagButton()}\n      />\n      <ReactTextareaAutosize\n        placeholder={\n          data.id === WriteEditorState.focusLine\n            ? `명령어 사용시 \"/\"를 입력하세요`\n            : \"\"\n        }\n        spellCheck={false}\n        // cacheMeasurements\n        style={drogOver ? { borderBottom: \"5px solid #c4e3f0\" } : {}}\n        onKeyDown={(e) => {\n          switch (e.code) {\n            case \"Space\":\n              onKeyDownSpace();\n              break;\n            case \"ArrowUp\":\n              onKeyDownArrowUp(e);\n              break;\n            case \"ArrowDown\":\n              onKeyDownArrowDown(e);\n              break;\n            case \"Tab\":\n              onKeyDownTab(e);\n              break;\n            case \"Backspace\":\n              onKeyDownBackspace();\n              break;\n            case \"KeyZ\":\n              onKeyDownZ(e);\n              break;\n          }\n        }}\n        onDrop={onDropUrl}\n        onDragOver={() => {\n          dragOver();\n        }}\n        onDragLeave={() => {\n          dragLeave();\n        }}\n        className=\"content\"\n        value={text}\n        ref={inputterRef}\n        disabled={false}\n        onPaste={onPasteImg}\n        onKeyPress={onKeyPressEnter}\n        onClick={() => {\n          click();\n        }}\n        onChange={(e) => onChangeText(e, data.id)}\n        onBlur={onBlur}\n      />\n      {data.tag === \"code\" && (\n        <SyntaxHighlighter\n          showLineNumbers\n          onClick={() => click()}\n          language=\"javascript\"\n          style={docco}\n          wrapLongLines\n          lineProps={{\n            style: { wordBreak: \"break-all\", whiteSpace: \"pre-wrap\" },\n          }}\n          customStyle={{ width: \"100%\", cursor: \"text\", height: \"100%\" }}\n        >\n          {text}\n        </SyntaxHighlighter>\n      )}\n      {data.id === WriteEditorState.tagBoxId &&\n        data.id === WriteEditorState.focusLine && (\n          <TagBox inputterRef={inputterRef} />\n        )}\n    </EditorInputterLine>\n  );\n};\n\nconst EditorInputterLine = styled.div`\n  display: flex;\n  position: relative;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  & > textarea {\n    background-color: rgba(0, 0, 0, 0);\n  }\n  &:hover {\n    & > img {\n      opacity: 1;\n    }\n  }\n  & > img {\n    opacity: 0;\n    transition: 0.2s;\n  }\n`;\n\nexport default EditorInputter;\n"]},"metadata":{},"sourceType":"module"}